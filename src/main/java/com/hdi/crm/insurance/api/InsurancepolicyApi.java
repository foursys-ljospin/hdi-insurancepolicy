/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.hdi.crm.insurance.api;

import com.hdi.crm.insurance.api.dto.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-20T20:43:56.051Z")

@Api(value = "insurancepolicy", description = "the insurancepolicy API")
public interface InsurancepolicyApi {

    @ApiOperation(value = "InsurancePolicy Payments", nickname = "getPayments", notes = "Get a payments of insurancepolicy", response = InsurancePolicyPayments.class, responseContainer = "List", tags={ "insurancepolicy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = InsurancePolicyPayments.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiErrorResponse.class),
        @ApiResponse(code = 404, message = "Data not found", response = ApiErrorResponse.class),
        @ApiResponse(code = 405, message = "Data input not supplied or invalid", response = ApiErrorResponse.class),
        @ApiResponse(code = 406, message = "Exception", response = ApiErrorResponse.class) })
    @RequestMapping(value = "/insurancepolicy/{idInsurancePolicy}/installments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InsurancePolicyPayments>> getPayments(@ApiParam(value = "Company ID" ,required=true) @RequestHeader(value="X-Company-Id", required=true) String xCompanyId,@ApiParam(value = "Application ID" ,required=true) @RequestHeader(value="X-Application-Id", required=true) String xApplicationId,@ApiParam(value = "User ID" ,required=true) @RequestHeader(value="X-User-Id", required=true) String xUserId,@ApiParam(value = "ID da Apólice de Seguro",required=true) @PathVariable("idInsurancePolicy") Long idInsurancePolicy,@Min(0)@ApiParam(value = "Number of start record.") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(1) @Max(100) @ApiParam(value = "Quantity of records", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Fields list to return data") @Valid @RequestParam(value = "fieldsFilter", required = false) String fieldsFilter);


    @ApiOperation(value = "Registro de Interação (Agenda)", nickname = "getInteractionLog", notes = "Consulta de Registro de Interação (Agenda)", response = InteractionLog.class, responseContainer = "List", tags={ "insurancepolicy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = InteractionLog.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiErrorResponse.class),
        @ApiResponse(code = 404, message = "Data not found", response = ApiErrorResponse.class),
        @ApiResponse(code = 405, message = "Data input not supplied or invalid", response = ApiErrorResponse.class),
        @ApiResponse(code = 406, message = "Exception", response = ApiErrorResponse.class) })
    @RequestMapping(value = "/insurancepolicy/{idInsurancePolicy}/interactionlog",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InteractionLog>> getInteractionLog(@ApiParam(value = "Company ID" ,required=true) @RequestHeader(value="X-Company-Id", required=true) String xCompanyId,@ApiParam(value = "Application ID" ,required=true) @RequestHeader(value="X-Application-Id", required=true) String xApplicationId,@ApiParam(value = "User ID" ,required=true) @RequestHeader(value="X-User-Id", required=true) String xUserId,@ApiParam(value = "ID da Apólice de Seguro",required=true) @PathVariable("idInsurancePolicy") Long idInsurancePolicy,@Min(0)@ApiParam(value = "Number of start record.") @Valid @RequestParam(value = "skip", required = false) Integer skip,@Min(1) @Max(100) @ApiParam(value = "Quantity of records", defaultValue = "20") @Valid @RequestParam(value = "limit", required = false, defaultValue="20") Integer limit,@ApiParam(value = "Fields list to return data") @Valid @RequestParam(value = "fieldsFilter", required = false) String fieldsFilter);


    @ApiOperation(value = "Invoice to InsurancePolicy", nickname = "getInsuranePolicyInvoce", notes = "get the invoice of insurancepolicy", response = InsurancePdf.class, responseContainer = "List", tags={ "insurancepolicy", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = InsurancePdf.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = ApiErrorResponse.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ApiErrorResponse.class),
        @ApiResponse(code = 404, message = "Data not found", response = ApiErrorResponse.class),
        @ApiResponse(code = 405, message = "Data input not supplied or invalid", response = ApiErrorResponse.class),
        @ApiResponse(code = 406, message = "Exception", response = ApiErrorResponse.class) })
    @RequestMapping(value = "/insurancepolicy/{idInsurancePolicy}/payment-pdf",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<InsurancePdf>> getInsuranePolicyInvoce(@ApiParam(value = "Company ID" ,required=true) @RequestHeader(value="X-Company-Id", required=true) String xCompanyId, @ApiParam(value = "Application ID" ,required=true) @RequestHeader(value="X-Application-Id", required=true) String xApplicationId, @ApiParam(value = "User ID" ,required=true) @RequestHeader(value="X-User-Id", required=true) String xUserId, @ApiParam(value = "ID da Apólice de Seguro",required=true) @PathVariable("idInsurancePolicy") Integer idInsurancePolicy, @ApiParam(value = "Number of part invoce") @Valid @RequestParam(value = "InvoicePart", required = false) Integer invoicePart);


//    @ApiOperation(value = "Invoice to InsurancePolicy", nickname = "getInsuranePolicyInvoceEmail", notes = "Send by email the invoice of insurancepolicy", tags={ "insurancepolicy", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 204, message = "Successful Operation"),
//        @ApiResponse(code = 401, message = "Unauthorized", response = ApiErrorResponse.class),
//        @ApiResponse(code = 403, message = "Forbidden", response = ApiErrorResponse.class),
//        @ApiResponse(code = 404, message = "Data not found", response = ApiErrorResponse.class),
//        @ApiResponse(code = 405, message = "Data input not supplied or invalid", response = ApiErrorResponse.class),
//        @ApiResponse(code = 406, message = "Exception", response = ApiErrorResponse.class) })
//    @RequestMapping(value = "/insurancepolicy/{idInsurancePolicy}/payment-email",
//        produces = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Void> getInsuranePolicyInvoceEmail(@ApiParam(value = "Company ID" ,required=true) @RequestHeader(value="X-Company-Id", required=true) String xCompanyId,@ApiParam(value = "Application ID" ,required=true) @RequestHeader(value="X-Application-Id", required=true) String xApplicationId,@ApiParam(value = "User ID" ,required=true) @RequestHeader(value="X-User-Id", required=true) String xUserId,@ApiParam(value = "ID da Apólice de Seguro",required=true) @PathVariable("idInsurancePolicy") Long idInsurancePolicy);
//
//
//    @ApiOperation(value = "InsurancePolicy Start Kit", nickname = "pOSTStarterKit", notes = "Send 2ª Start Kit", tags={ "insurancepolicy", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "Successful Operation"),
//        @ApiResponse(code = 401, message = "Unauthorized", response = ApiErrorResponse.class),
//        @ApiResponse(code = 403, message = "Forbidden", response = ApiErrorResponse.class),
//        @ApiResponse(code = 404, message = "Data not found", response = ApiErrorResponse.class),
//        @ApiResponse(code = 405, message = "Data input not supplied or invalid", response = ApiErrorResponse.class),
//        @ApiResponse(code = 406, message = "Exception", response = ApiErrorResponse.class) })
//    @RequestMapping(value = "/insurancepolicy/{idInsurancePolicy}/starter-kit",
//        produces = { "application/json" },
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Void> pOSTStarterKit(@ApiParam(value = "Company ID" ,required=true) @RequestHeader(value="X-Company-Id", required=true) String xCompanyId,@ApiParam(value = "Application ID" ,required=true) @RequestHeader(value="X-Application-Id", required=true) String xApplicationId,@ApiParam(value = "User ID" ,required=true) @RequestHeader(value="X-User-Id", required=true) String xUserId,@ApiParam(value = "ID da Apólice de Seguro",required=true) @PathVariable("idInsurancePolicy") Long idInsurancePolicy,@ApiParam(value = "Contacts Entity" ,required=true )  @Valid @RequestBody StarterKit contacts);

}
